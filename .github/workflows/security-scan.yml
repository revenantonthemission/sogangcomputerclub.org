name: Security Scanning

on:
  push:
    branches: [ master, develop, staging ]
  pull_request:
    branches: [ master, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  trivy-fs-scan:
    name: Trivy Filesystem Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner in filesystem mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        vuln-type: 'os,library'

    - name: Upload Trivy results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-fs-results.sarif'
        category: 'trivy-fs'

    - name: Generate vulnerability report
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        output: 'trivy-fs-report.txt'

    - name: Upload vulnerability report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-filesystem-report
        path: trivy-fs-report.txt

  trivy-config-scan:
    name: Trivy Config Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy config scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-config-results.sarif'
        exit-code: '0'

    - name: Upload config scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-config-results.sarif'
        category: 'trivy-config'

    - name: Scan Kubernetes manifests
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: 'k8s/'
        format: 'table'
        output: 'trivy-k8s-report.txt'

    - name: Upload Kubernetes scan report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-kubernetes-report
        path: trivy-k8s-report.txt

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        deny-licenses: GPL-2.0, GPL-3.0

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@v3.82.13
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --only-verified

  docker-image-scan:
    name: Docker Image Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        image: [backend, frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build image for scanning
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.image == 'backend' && '.' || './frontend' }}
        file: ${{ matrix.image == 'backend' && './Dockerfile' || './frontend/Dockerfile' }}
        tags: ${{ matrix.image }}:scan
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Scan image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ matrix.image }}:scan
        format: 'sarif'
        output: 'trivy-${{ matrix.image }}-image.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload image scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-${{ matrix.image }}-image.sarif'
        category: 'trivy-${{ matrix.image }}-image'

    - name: Generate detailed image report
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ matrix.image }}:scan
        format: 'table'
        output: 'trivy-${{ matrix.image }}-detailed.txt'

    - name: Upload detailed report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-${{ matrix.image }}-image-report
        path: 'trivy-${{ matrix.image }}-detailed.txt'

    - name: Check for critical vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ matrix.image }}:scan
        format: 'table'
        exit-code: '1'
        severity: 'CRITICAL'
        ignore-unfixed: true

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{ matrix.language }}"

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [trivy-fs-scan, trivy-config-scan, secret-scan, docker-image-scan, codeql-analysis]
    if: always()

    steps:
    - name: Generate security summary
      run: |
        echo "# Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Scan Status" >> $GITHUB_STEP_SUMMARY
        echo "- Filesystem Scan: ${{ needs.trivy-fs-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Config Scan: ${{ needs.trivy-config-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Docker Image Scan: ${{ needs.docker-image-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ needs.trivy-fs-scan.result }}" == "failure" ] || \
           [ "${{ needs.trivy-config-scan.result }}" == "failure" ] || \
           [ "${{ needs.secret-scan.result }}" == "failure" ] || \
           [ "${{ needs.docker-image-scan.result }}" == "failure" ] || \
           [ "${{ needs.codeql-analysis.result }}" == "failure" ]; then
          echo "⚠️ **Security issues detected!** Please review the scan results." >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "✅ **All security scans passed!**" >> $GITHUB_STEP_SUMMARY
        fi
